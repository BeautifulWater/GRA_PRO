var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ssr.ts
var ssr_exports = {};
__export(ssr_exports, {
  default: () => createRequestHandler
});
module.exports = __toCommonJS(ssr_exports);
var import_server = require("react-dom/server");
var import_react_router_dom = require("react-router-dom");
function createRequestHandler(opts) {
  return async function(req, res, next) {
    const {
      routesWithServerLoader,
      PluginManager,
      getPlugins,
      getValidKeys,
      getRoutes
    } = opts;
    if (req.url.startsWith("/__serverLoader") && req.query.route) {
      const data = await executeLoader(req.query.route, routesWithServerLoader);
      res.status(200).json(data);
      return;
    }
    const pluginManager = PluginManager.create({
      plugins: getPlugins(),
      validKeys: getValidKeys()
    });
    const { routes, routeComponents } = await getRoutes(pluginManager);
    const matches = matchRoutesForSSR(req.url, routes);
    if (matches.length === 0) {
      return next();
    }
    const loaderData = {};
    await Promise.all(matches.filter((id) => routes[id].hasServerLoader).map((id) => new Promise(async (resolve) => {
      loaderData[id] = await executeLoader(id, routesWithServerLoader);
      resolve();
    })));
    const manifest = typeof opts.manifest === "function" ? opts.manifest() : opts.manifest;
    const context = {
      routes,
      routeComponents,
      pluginManager,
      location: req.url,
      manifest,
      loaderData
    };
    const jsx = await opts.getClientRootComponent(context);
    const stream = (0, import_server.renderToPipeableStream)(jsx, {
      bootstrapScripts: [manifest.assets["umi.js"] || "/umi.js"],
      onShellReady() {
        res.setHeader("Content-type", "text/html");
        stream.pipe(res);
      },
      onError(x) {
        console.error(x);
      }
    });
  };
}
function matchRoutesForSSR(reqUrl, routesById) {
  var _a;
  return ((_a = (0, import_react_router_dom.matchRoutes)(createClientRoutes({ routesById }), reqUrl)) == null ? void 0 : _a.map((route) => route.route.id)) || [];
}
function createClientRoutes(opts) {
  const { routesById, parentId } = opts;
  return Object.keys(routesById).filter((id) => routesById[id].parentId === parentId).map((id) => {
    const route = createClientRoute(routesById[id]);
    const children = createClientRoutes({
      routesById,
      parentId: route.id
    });
    if (children.length > 0) {
      route.children = children;
    }
    return route;
  });
}
function createClientRoute(route) {
  const { id, path, index } = route;
  return {
    id,
    path,
    index
  };
}
async function executeLoader(routeKey, routesWithServerLoader) {
  const mod = await routesWithServerLoader[routeKey]();
  if (!mod.serverLoader || typeof mod.serverLoader !== "function") {
    return;
  }
  return await mod.serverLoader();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
