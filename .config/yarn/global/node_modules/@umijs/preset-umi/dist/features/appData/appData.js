var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/appData/appData.ts
var appData_exports = {};
__export(appData_exports, {
  default: () => appData_default
});
module.exports = __toCommonJS(appData_exports);
var import_bundler_utils = require("@umijs/bundler-utils");
var import_utils = require("@umijs/utils");
var import_fs = require("fs");
var import_path = require("path");
var import_ini = require("../../../compiled/ini");
var import_os_locale = require("../../../compiled/os-locale");
var import_watch = require("../../commands/dev/watch");
var import_scan = require("../../libs/scan");
var import_routes = require("../tmpFiles/routes");
var appData_default = (api) => {
  api.modifyAppData(async (memo) => {
    var _a;
    memo.routes = await (0, import_routes.getRoutes)({
      api
    });
    memo.apiRoutes = await (0, import_routes.getApiRoutes)({
      api
    });
    memo.hasSrcDir = api.paths.absSrcPath.endsWith("/src");
    memo.npmClient = api.userConfig.npmClient || (0, import_utils.getNpmClient)({ cwd: api.cwd });
    memo.umi = {
      version: require("../../../package.json").version,
      name: "Umi",
      importSource: "umi",
      cliName: "umi"
    };
    memo.bundleStatus = {
      done: false
    };
    if (api.config.mfsu !== false) {
      memo.mfsuBundleStatus = {
        done: false
      };
    }
    memo.react = {
      version: require((0, import_path.join)(api.config.alias.react, "package.json")).version,
      path: api.config.alias.react
    };
    memo["react-dom"] = {
      version: require((0, import_path.join)(api.config.alias["react-dom"], "package.json")).version,
      path: api.config.alias["react-dom"]
    };
    memo.appJS = await getAppJsInfo();
    memo.locale = await (0, import_os_locale.osLocale)();
    memo.vite = api.config.vite ? {} : void 0;
    const { globalCSS, globalJS } = getGlobalFiles();
    memo.globalCSS = globalCSS;
    memo.globalJS = globalJS;
    const gitDir = findGitDir(api.paths.cwd);
    if (gitDir) {
      const git = {};
      const configPath = (0, import_path.join)(gitDir, "config");
      if ((0, import_fs.existsSync)(configPath)) {
        const config = (0, import_fs.readFileSync)(configPath, "utf-8");
        const url = (_a = (0, import_ini.parse)(config)['remote "origin"']) == null ? void 0 : _a.url;
        if (url) {
          git.originUrl = url;
        }
      }
      memo.git = git;
    }
    memo.framework = "react";
    return memo;
  });
  function findGitDir(dir) {
    if (dir === (0, import_path.resolve)("/")) {
      return null;
    }
    if ((0, import_fs.existsSync)((0, import_path.join)(dir, ".git"))) {
      return (0, import_path.join)(dir, ".git");
    }
    const parent = findGitDir((0, import_path.join)(dir, ".."));
    if (parent) {
      return parent;
    }
    return null;
  }
  api.register({
    key: "onGenerateFiles",
    async fn(args) {
      if (!args.isFirstTime) {
        api.appData.appJS = await getAppJsInfo();
        const { globalCSS, globalJS } = getGlobalFiles();
        api.appData.globalCSS = globalCSS;
        api.appData.globalJS = globalJS;
      }
    },
    stage: Number.NEGATIVE_INFINITY
  });
  api.register({
    key: "updateAppDataDeps",
    async fn() {
      const resolver = (0, import_scan.createResolver)({
        alias: api.config.alias
      });
      api.appData.deps = await (0, import_scan.scan)({
        entry: (0, import_path.join)(api.paths.absTmpPath, "umi.ts"),
        externals: api.config.externals,
        resolver
      });
      if (api.appData.deps["react"]) {
        api.appData.deps["react"].version = api.appData.react.version;
      }
      api.appData.deps["react-dom"] = {
        version: api.appData.react.version,
        matches: ["react-dom"],
        subpaths: []
      };
    }
  });
  async function getAppJsInfo() {
    for (const path of (0, import_watch.expandJSPaths)((0, import_path.join)(api.paths.absSrcPath, "app"))) {
      if ((0, import_fs.existsSync)(path)) {
        const [_, exports] = await (0, import_bundler_utils.parseModule)({
          path,
          content: (0, import_fs.readFileSync)(path, "utf-8")
        });
        return {
          path,
          exports
        };
      }
    }
    return null;
  }
  function getGlobalFiles() {
    const absSrcPath = api.paths.absSrcPath;
    const existsAndPushFile = (memo, file) => {
      if ((0, import_fs.existsSync)(file)) {
        memo.push(file);
      }
      return memo;
    };
    const globalCSS = (0, import_watch.expandCSSPaths)((0, import_path.join)(absSrcPath, "global")).reduce(existsAndPushFile, []);
    const globalJS = (0, import_watch.expandJSPaths)((0, import_path.join)(absSrcPath, "global")).reduce(existsAndPushFile, []);
    return {
      globalCSS,
      globalJS
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
